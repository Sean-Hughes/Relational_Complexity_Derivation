************************************************
	       Implicit Attitude Test (IAT)	      
************************************************
Original code: Sean Draine (seandr@millisecond.com)
Alterations by Ian Hussey (ian.hussey@ugent.be) & Sean Hughes (sean.hughes@ugent.be)
Last updated: 28-9-2016

Requires Inquisit 4.0.0.0 or higher

Alterations from standard IAT task:
- NB No within-task counterbalancing, all participants recieve the same block order.
- 5 blocks only: omits blocks 3 and 6 from the standard IAT.
- This means only one D1 score is calculated too.

************************************************
stimuli
************************************************

<item target_1_label>
/1 = "WIP"
</item>

<item target_1>
/1 = "WIP"
</item>

<item target_2_label>
/1 = "LOF"
</item>

<item target_2>
/1 = "LOF"
</item>

<item attribute_1_label>
/1 = "YEL"
</item>

<item attribute_1>
/1 = "YEL"
</item>

<item attribute_2_label>
/1 = "DWA"
</item>

<item attribute_2>
/1 = "DWA"
</item>

************************************************
Defaults
************************************************

<defaults>
/ fontstyle = ("Arial", 3.5%)
/ screencolor = black
/ txbgcolor = black
/ txcolor = white
/ minimumversion = "4.0.0.0"
/ canvasaspectratio = (4, 3)
</defaults>

************************************************
Scoring
************************************************

* 1 is compatible, 2 is incompatible

completed:				0 = script was not completed; 1 = script was completed (all conditions run)
sum1:					tracks the sum of the latencies to correct responses (latencies <= 10000ms) for the second compatible block 1B
								Note: by design, all final trial responses are correct (regardless of accuracy of initial response)
sum2:					tracks the sum of the latencies to correct responses (latencies <= 10000ms) for the second incompatible block 2B
								Note: by design, all final trial responses are correct (regardless of accuracy of initial response) 
n1:						counts the number of trials in second compatible block 1B
n2:						counts the number of trials in second incompatible block 2B
ss1:					tracks the sum of the squared latencies to correct responses (latencies <= 10000ms) in the second compatible block 
ss2:					tracks the sum of the squared latencies to correct responses (latencies <= 10000ms) in the second incompatible block 
n_correct:				counts all initial correct responses of all trials that count towards D score

<values>
/ completed = 0
/ sum1 = 0
/ sum2 = 0
/ n1 = 0
/ n2 = 0
/ ss1 = 0
/ ss2 = 0
/ n_correct = 0
</values>

m1:						mean latencies of correct responses in second compatible block
m2:						mean latencies of correct responses in second incompatible block
sd1:					standard deviation of latencies of correct responses in second compatible block
sd2:					standard deviation of latencies of correct responses in second incompatible block
sd: 					standarddeviation of latencies in second block
D1:						D-score for second blocks
preferred:				stores the preferred target category
notpreferred :			stores the non preferred target category
percentcorrect:       	calculates the overall percent correct score of initial responses of test trials of D-score qualifying latencies

<expressions>
/ m1 = values.sum1 / values.n1
/ m2 = values.sum2 / values.n2
/ sd1 = sqrt((values.ss1 - (values.n1 * (expressions.m1 * expressions.m1))) / (values.n1 - 1))
/ sd2 = sqrt((values.ss2 - (values.n2 * (expressions.m2 * expressions.m2))) / (values.n2 - 1))
/ sd = sqrt((((values.n1 - 1) * (expressions.sd1 * expressions.sd1) + (values.n2 - 1) * (expressions.sd2 * expressions.sd2)) + ((values.n1 + values.n2) * ((expressions.m1 - expressions.m2) * (expressions.m1 - expressions.m2)) / 4) ) / (values.n1 + values.n2 - 1) )
/ D1 = (m2 - m1) / expressions.sd
/ preferred = "unknown"
/ notpreferred = "unknown"
/ percentcorrect = (values.n_correct/ (values.n1 + values.n2)) * 100
</expressions>

************************************************
raw data
************************************************

date/time/group/subject:			built in variables that track date and time when script was run
blockcode:							the name of the current trial
blocknum:							the number of the current trial
trialcode:							the name of the current trial
trialnum:							the number of the current trial
response:							the final trial response (scancodes of the keys pressed)
										Note: script saves the final and -by design- correct response
correct:							the accuracy of the initial response
										0 = initial response was incorrect and needed to be corrected
										1 = initial response is correct
latency:							the latency of the final (correct) response
stimulusnumber:						the number of the current stimulus
stimulusitem:						the currently presented item
D1:									d-score
percentcorrect:       				the overall percent correct score of initial responses of test trials of D-score qualifying latencies

<data>
/ file = "IAT_test_rawdata.iqdat"
/ columns = [date, time, group, subject, blockcode, blocknum, trialcode, trialnum, response, correct, latency, 
			 stimulusnumber, stimulusitem, expressions.D1, expressions.percentcorrect]
/ separatefiles = true
</data>

************************************************
summary data
************************************************

script.startdate:					date script was run
script.starttime:					time script was started
script.subjectid:					subject id number
script.groupid:						group id number
script.elapsedtime:					time it took to run script (in ms)
/completed:							0 = script was not completed; 1 = script was completed (all conditions run)
expressions.D1:						D-score
/percentcorrect:       				the overall percent correct score of initial responses of test trials of D-score qualifying latencies

<summarydata >
/ file = "IAT_test_summary.iqdat"
/ columns = [script.startdate, script.starttime, script.subjectid, script.groupid, script.elapsedtime, values.completed,
expressions.D1, expressions.percentcorrect]
</summarydata>

************************************************
Instructions
************************************************

<trial instructions>
/ stimulustimes = [1=instructions, spacebar]
/ correctresponse = (" ")
/ errormessage = false
/ recorddata = false
</trial>

<text instructions>
/ items = instructions
/ hjustify = left
/ size = (90%, 50%)
/ position = (50%, 85%)
/ valign = bottom
/ select = sequence
/ resetinterval = 20
</text>

<item instructions>
/ 1 = "This is a timed task where you have to sort words. Put your fingers on the E and the I key. 

Sort the words in the middle of the screen based on the words that appear on the top left (E) or right (I) sides of the screen. Try to respond AS QUICKLY AS POSSIBLE without making too many mistakes.

When you make a mistake there will be a red cross. This cross will remain onscreen until you press the correct key."

/ 2 = "Look above. The words have changed. So will the words that appear in the middle of the screen. 

Sort the words in the middle of the screen based on the words that appear on the top left (E) or right (I) sides of the screen. Try to respond AS QUICKLY AS POSSIBLE without making too many mistakes."

/ 3 = "Look above. The four words you saw separately now appear together. 

Sort the words in the middle of the screen based on the words that appear on the top left (E) or right (I) sides of the screen. Try to respond AS QUICKLY AS POSSIBLE without making too many mistakes"

/ 4 = "Look above. There are only two words now and they have switched locations. The word that was previously on the left is now on the right (and vice-versa). 

Sort the words in the middle of the screen based on the words that appear on the top left (E) or right (I) sides of the screen. Try to respond AS QUICKLY AS POSSIBLE without making too many mistakes"

/ 5 = "Look above. The four words now appear together. 

Sort the words in the middle of the screen based on the words that appear on the top left (E) or right (I) sides of the screen. Try to respond AS QUICKLY AS POSSIBLE without making too many mistakes"
</item>

<text spacebar>
/ items = ("Press the SPACE BAR to begin.")
/ position = (50%, 95%)
/ valign = bottom
</text>

<text attribute_1>
/ items = attribute_1
/ fontstyle = ("Arial", 5%)
</text>

<text attribute_2>
/ items = attribute_2
/ fontstyle = ("Arial", 5%)
</text>

<text target_2>
/ items = target_2
/ fontstyle = ("Arial", 5%)
</text>

<text target_1>
/ items = target_1
/ fontstyle = ("Arial", 5%)
</text>

<text error>
/ position = (50%, 75%)
/ items = ("X")
/ color = (255, 0, 0)
/ fontstyle = ("Arial", 10%, true)
</text>

<text attribute_1left>
/ items = attribute_1_label
/ valign = top
/ halign = left
/ position = (5%, 5%)
/ fontstyle = ("Arial", 5%)
</text>

<text attribute_2right>
/ items = attribute_2_label
/ valign = top
/ halign = right
/ position = (95%, 5%)
/ fontstyle = ("Arial", 5%)
</text>

<text attribute_1leftmixed>
/ items = attribute_1_label
/ valign = top
/ halign = left
/ position = (5%, 19%)
/ fontstyle = ("Arial", 5%)
</text>

<text attribute_2rightmixed>
/ items = attribute_2_label
/ valign = top
/ halign = right
/ position = (95%, 19%)
/ fontstyle = ("Arial", 5%)
</text>

<text target_2left>
/ items = target_2_label
/ valign = top
/ halign = left	
/ position = (5%, 5%)
/ fontstyle = ("Arial", 5%)
</text>

<text target_2right>
/ items = target_2_label
/ valign = top
/ halign = right
/ position = (95%, 5%)
/ fontstyle = ("Arial", 5%)
</text>

<text target_1left>
/ items = target_1_label
/ valign = top
/ halign = left
/ position = (5%, 5%)
/ fontstyle = ("Arial", 5%)
</text>

<text target_1right>
/ items = target_1_label
/ valign = top
/ halign = right
/ position = (95%, 5%)
/ fontstyle = ("Arial", 5%)
</text>

<text orleft>
/ items = ("or")
/ valign = top
/ halign = left
/ position = (5%, 12%)
/ fontstyle = ("Arial", 5%)
/ txcolor = (0, 255, 0)
</text>

<text orright>
/ items = ("or")
/ valign = top
/ halign = right
/ position = (95%, 12%)
/ fontstyle = ("Arial", 5%)
/ txcolor = (0, 255, 0)
</text>

************************************************
trials
************************************************

<trial attribute_1>
/ validresponse = ("E", "I")
/ correctresponse = ("E")
/ stimulusframes = [1 = attribute_1]
/ posttrialpause = 300
</trial>

<trial attribute_2>
/ validresponse = ("E", "I")
/ correctresponse = ("I")
/ stimulusframes = [1 = attribute_2]
/ posttrialpause = 300
</trial>

<trial target_2left>
/ validresponse = ("E", "I")
/ correctresponse = ("E")
/ stimulusframes = [1 = target_2]
/ posttrialpause = 300
</trial>

<trial target_2right>
/ validresponse = ("E", "I")
/ correctresponse = ("I")
/ stimulusframes = [1 = target_2]
/ posttrialpause = 300
</trial>

<trial target_1left>
/ validresponse = ("E", "I")
/ correctresponse = ("E")
/ stimulusframes = [1 = target_1]
/ posttrialpause = 300
</trial>

<trial target_1right>
/ validresponse = ("E", "I")
/ correctresponse = ("I")
/ stimulusframes = [1 = target_1]
/ posttrialpause = 300
</trial>

************************************************
blocks
************************************************

block 1 trials and instructions
<block IAT_test_targetincompatiblepractice> 
/ bgstim = (target_1right, target_2left)
/ trials = [1 = instructions; 2-9 = random(target_1right, target_2left)]
/ errormessage = true(error,200)
/ responsemode = correct
</block>

block 2 trials and instructions
<block IAT_test_attributepractice>
/ bgstim = (attribute_1left, attribute_2right)
/ trials = [1 = instructions; 2-9 = random(attribute_1, attribute_2)]
/ errormessage = true(error,200)
/ responsemode = correct
</block>

block 3 instructions
<block IAT_test_incompatibletestinstructions>
/ bgstim = (target_2left, orleft, attribute_1leftmixed, target_1right, orright, attribute_2rightmixed)
/ trials = [1 = instructions]
/ recorddata = false
</block>

block 3 trials
<block IAT_test_incompatible_block>
/ bgstim = (target_2left, orleft, attribute_1leftmixed, target_1right, orright, attribute_2rightmixed)
/ trials = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40 = random(target_2left, target_1right);
			1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39 = random(attribute_1, attribute_2)]
/ errormessage = true(error, 200)
/ responsemode = correct
/ ontrialend = [if(block.IAT_test_incompatible_block.latency <= 10000) values.sum2 = values.sum2 + block.IAT_test_incompatible_block.latency]
/ ontrialend = [if(block.IAT_test_incompatible_block.latency <= 10000) values.n2 += 1]
/ ontrialend = [if(block.IAT_test_incompatible_block.latency <= 10000) values.ss2 = values.ss2 + (block.IAT_test_incompatible_block.latency * block.IAT_test_incompatible_block.latency)]
/ ontrialend = [if(block.IAT_test_incompatible_block.latency <= 10000) values.n_correct += block.IAT_test_incompatible_block.correct]
</block>

block 4 trials and instructions
<block IAT_test_targetcompatiblepractice>
/ bgstim = (target_1left, target_2right)
/ trials = [1 = instructions; 2-9 = random(target_1left, target_2right)]
/ errormessage = true(error,200)
/ responsemode = correct
</block>

block 5 instructions
<block IAT_test_compatibletestinstructions>
/ bgstim = (target_1left, orleft, attribute_1leftmixed, target_2right, orright, attribute_2rightmixed)
/ trials = [1 = instructions]
/ recorddata = false
</block>

block 6 trials
<block IAT_test_compatible_block>
/ bgstim = (target_1left, orleft, attribute_1leftmixed, target_2right, orright, attribute_2rightmixed)
/ trials = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40 = random(target_1left, target_2right);
			1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39 = random(attribute_1, attribute_2)]
/ errormessage = true(error, 200)
/ responsemode = correct
/ ontrialend = [if(block.IAT_test_compatible_block.latency <= 10000) values.sum1 = values.sum1 + block.IAT_test_compatible_block.latency]
/ ontrialend = [if(block.IAT_test_compatible_block.latency <= 10000) values.n1 += 1]
/ ontrialend = [if(block.IAT_test_compatible_block.latency <= 10000) values.ss1 = values.ss1 + (block.IAT_test_compatible_block.latency * block.IAT_test_compatible_block.latency)]
/ ontrialend = [if(block.IAT_test_compatible_block.latency <= 10000) values.n_correct += block.IAT_test_compatible_block.correct]
</block>

************************************************
experiment
************************************************

<expt>
/ blocks = [1=IAT_test_targetincompatiblepractice; 
			2=IAT_test_attributepractice; 
			3=IAT_test_incompatibletestinstructions;
			4=IAT_test_incompatible_block; 
			5=IAT_test_targetcompatiblepractice; 
			6=IAT_test_compatibletestinstructions;
			7=IAT_test_compatible_block]
/onexptend = [values.completed = 1]
</expt>

************************************************
test Monkey
************************************************

<monkey>
/ latencydistribution = normal(500, 100)
/ percentcorrect = 90
</monkey>

